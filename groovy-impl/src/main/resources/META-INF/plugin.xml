<!--
  ~  Copyright 2000-2009 JetBrains s.r.o.
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~  http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  ~
  -->

<consulo-plugin url="https://github.com/consulo/consulo-groovy">
  <id>org.intellij.groovy</id>
  <name>Groovy</name>
  <description>Plugin for Groovy language support, including Groovy++, Grape, Gant and Griffon</description>
  <version>SNAPSHOT</version>
  <category>Custom Languages</category>
  <vendor>JetBrains</vendor>
  <depends optional="true">org.jetbrains.idea.maven</depends>

  <depends>com.intellij.properties</depends>
  <depends>consulo.java</depends>

  <tags>
    <tag>custom.language</tag>
  </tags>

  <extensionPoints>
    <extensionPoint name="methodComparator" interface="org.jetbrains.plugins.groovy.lang.resolve.GrMethodComparator"/>
    <extensionPoint name="membersContributor" interface="org.jetbrains.plugins.groovy.lang.resolve.NonCodeMembersContributor"/>
    <extensionPoint name="defaultImportContributor" interface="org.jetbrains.plugins.groovy.lang.resolve.DefaultImportContributor"/>
    <extensionPoint name="astTransformContributor" interface="org.jetbrains.plugins.groovy.lang.resolve.ast.AstTransformContributor"/>
    <extensionPoint name="closureMissingMethodContributor"
                    interface="org.jetbrains.plugins.groovy.lang.resolve.ClosureMissingMethodContributor"/>
    <extensionPoint name="variableEnhancer" interface="org.jetbrains.plugins.groovy.lang.psi.typeEnhancers.GrVariableEnhancer"/>
    <extensionPoint name="signatureHintProcessor"
                    interface="org.jetbrains.plugins.groovy.impl.lang.psi.typeEnhancers.SignatureHintProcessor"/>
    <extensionPoint name="referenceTypeEnhancer" interface="org.jetbrains.plugins.groovy.lang.psi.typeEnhancers.GrReferenceTypeEnhancer"/>
    <extensionPoint name="typeConverter" interface="org.jetbrains.plugins.groovy.lang.psi.typeEnhancers.GrTypeConverter"/>
    <extensionPoint name="expectedTypesContributor"
                    interface="org.jetbrains.plugins.groovy.lang.psi.expectedTypes.GroovyExpectedTypesContributor"/>

    <extensionPoint name="positionManagerDelegate"
                    interface="org.jetbrains.plugins.groovy.impl.extensions.debugger.ScriptPositionManagerHelper"/>
    <extensionPoint name="compilerExtension" interface="org.jetbrains.plugins.groovy.impl.compiler.GroovyCompilerExtension"/>
    <extensionPoint name="scriptTypeDetector" interface="org.jetbrains.plugins.groovy.extensions.GroovyScriptTypeDetector"/>

    <extensionPoint name="namedArgumentProvider" interface="org.jetbrains.plugins.groovy.extensions.GroovyNamedArgumentProvider"/>
    <extensionPoint name="mapContentProvider" interface="org.jetbrains.plugins.groovy.impl.extensions.GroovyMapContentProvider"/>

    <extensionPoint name="unresolvedHighlightFilter"
                    interface="org.jetbrains.plugins.groovy.impl.extensions.GroovyUnresolvedHighlightFilter"/>
    <extensionPoint name="unresolvedHighlightFileFilter"
                    interface="org.jetbrains.plugins.groovy.impl.extensions.GroovyUnresolvedHighlightFileFilter"/>
    <extensionPoint name="configSlurperSupport" interface="org.jetbrains.plugins.groovy.impl.configSlurper.ConfigSlurperSupport"/>

    <extensionPoint name="callExpressionTypeCalculator"
                    interface="org.jetbrains.plugins.groovy.lang.psi.typeEnhancers.GrCallExpressionTypeCalculator"/>
    <extensionPoint name="classDescriptor" beanClass="org.jetbrains.plugins.groovy.extensions.GroovyClassDescriptor"/>
    <extensionPoint name="methodDescriptor" beanClass="org.jetbrains.plugins.groovy.extensions.GroovyMethodDescriptorExtension"/>

    <!-- Groovy DSL extension points -->
    <extensionPoint name="psiEnhancerCategory" interface="org.jetbrains.plugins.groovy.dsl.psi.PsiEnhancerCategory"/>
    <extensionPoint name="gdslTopLevelProvider" interface="org.jetbrains.plugins.groovy.dsl.dsltop.GdslMembersProvider"/>

    <extensionPoint name="groovyFrameworkConfigNotification"
                    interface="org.jetbrains.plugins.groovy.annotator.GroovyFrameworkConfigNotification"/>
    <extensionPoint name="groovySourceFolderDetector" interface="org.jetbrains.plugins.groovy.impl.actions.GroovySourceFolderDetector"/>

    <extensionPoint name="mvc.framework" interface="org.jetbrains.plugins.groovy.impl.mvc.MvcFramework"/>

    <extensionPoint name="closureCompleter" interface="org.jetbrains.plugins.groovy.impl.lang.completion.ClosureCompleter"/>

    <extensionPoint name="methodMayBeStaticInspectionFilter"
                    interface="org.jetbrains.plugins.groovy.impl.codeInspection.declaration.GrMethodMayBeStaticInspectionFilter"/>

    <extensionPoint name="customAnnotationChecker"
                    interface="org.jetbrains.plugins.groovy.impl.annotator.checkers.CustomAnnotationChecker"/>

    <extensionPoint name="convertToJava.customMethodInvocator"
                    interface="org.jetbrains.plugins.groovy.impl.refactoring.convertToJava.invocators.CustomMethodInvocator"/>
  </extensionPoints>


  <extensions defaultExtensionNs="com.intellij">
    <injectionConfig config="resources/groovyInjections.xml"/>
  </extensions>


  <extensions defaultExtensionNs="org.intellij.groovy">




    <methodDescriptor lightMethodKey="SwingBuilder_builder_method"
                      namedArgsProvider="org.jetbrains.plugins.groovy.impl.swingBuilder.SwingBuilderNamedArgumentProvider"/>



  </extensions>



  <extensions defaultExtensionNs="com.intellij">

    <moduleExtensionProvider key="groovy"
                             parentKey="java"
                             icon="consulo.groovy.psi.GroovyPsiIconGroup@groovy.groovy_16x16"
                             name="Groovy"
                             immutableClass="consulo.groovy.module.extension.GroovyModuleExtension"
                             mutableClass="consulo.groovy.module.extension.GroovyMutableModuleExtension"/>
    <moduleExtensionProvider key="griffon"
                             parentKey="groovy"
                             name="Griffon"
                             icon="consulo.groovy.psi.GroovyPsiIconGroup@griffon.griffon"
                             immutableClass="consulo.groovy.impl.griffon.module.extension.GriffonModuleExtension"
                             mutableClass="consulo.groovy.impl.griffon.module.extension.GriffonMutableModuleExtension"/>





    <annotator language="Groovy" implementationClass="org.jetbrains.plugins.groovy.impl.annotator.GrAnnotatorImpl"/>
    <annotator language="Groovy" implementationClass="org.jetbrains.plugins.groovy.impl.dsl.GroovyDslAnnotator"/>


    <liveTemplateContext implementation="org.jetbrains.plugins.groovy.impl.template.GroovyTemplateContextType$Generic"/>
    <liveTemplateContext implementation="org.jetbrains.plugins.groovy.impl.template.GroovyTemplateContextType$Expression"/>
    <liveTemplateContext implementation="org.jetbrains.plugins.groovy.impl.template.GroovyTemplateContextType$Statement"/>
    <liveTemplateContext implementation="org.jetbrains.plugins.groovy.impl.template.GroovyTemplateContextType$Declaration"/>

    <bundleLiveTemplateSet path="liveTemplates/Groovy"/>



    <lang.elementManipulator forClass="org.jetbrains.plugins.groovy.lang.psi.api.statements.expressions.literals.GrLiteral"
                             implementationClass="org.jetbrains.plugins.groovy.impl.lang.resolve.GroovyStringLiteralManipulator"/>
    <lang.elementManipulator forClass="org.jetbrains.plugins.groovy.lang.psi.api.statements.arguments.GrArgumentLabel"
                             implementationClass="org.jetbrains.plugins.groovy.impl.lang.psi.impl.statements.arguments.GrArgumentLabelManipulator"/>


    <projectConfigurable instance="org.jetbrains.plugins.groovy.impl.compiler.GroovyCompilerConfigurable" id="Groovy compiler"
                         displayName="Groovy Compiler" parentId="project.propCompiler"/>

    <stubElementTypeHolder class="org.jetbrains.plugins.groovy.lang.parser.GroovyElementTypes"/>





    <patterns.patternClass className="org.jetbrains.plugins.groovy.lang.psi.patterns.GroovyPatterns" alias="groovy"/>

    <stacktrace.fold substring="at org.codehaus.groovy."/>
    <stacktrace.fold substring="at groovy."/>
    <stacktrace.fold substring="at org.codehaus.groovy.runtime.DefaultGroovyMethods." negate="true"/>
    <stacktrace.fold substring="at org.codehaus.groovy.vmplugin.v5.PluginDefaultGroovyMethods." negate="true"/>
    <stacktrace.fold substring="at org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport." negate="true"/>



    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyLoopStatementThatDoesntLoop"
                     displayName="Loop statement that doesn't loop" groupName="Control Flow"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyLoopStatementThatDoesntLoopInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyConditionalWithIdenticalBranches"
                     displayName="Conditional expression with identical branches"
                     groupName="Control Flow" enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyConditionalWithIdenticalBranchesInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyConditionalCanBeElvis"
                     displayName="Conditional expression can be elvis" groupName="Control Flow"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyConditionalCanBeElvisInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyConditionalCanBeConditionalCall"
                     displayName="Conditional expression can be conditional call"
                     groupName="Control Flow" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyConditionalCanBeConditionalCallInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyIfStatementWithIdenticalBranches"
                     displayName="If statement with identical branches"
                     groupName="Control Flow" enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyIfStatementWithIdenticalBranchesInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyIfStatementWithTooManyBranches"
                     displayName="If statement with too many branches"
                     groupName="Control Flow" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyIfStatementWithTooManyBranchesInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyFallthrough" displayName="Fallthrough in switch statement"
                     groupName="Control Flow"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyFallthroughInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyUnnecessaryContinue"
                     displayName="Unnecessary 'continue' statement" groupName="Control Flow"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyUnnecessaryContinueInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyUnnecessaryReturn" displayName="Unnecessary 'return' statement"
                     groupName="Control Flow"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyUnnecessaryReturnInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GrFinalVariableAccess" displayName="Final variable access"
                     groupName="Control Flow"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.finalVar.GrFinalVariableAccessInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovySwitchStatementWithNoDefault"
                     displayName="Switch statement with no default case"
                     groupName="Control Flow" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovySwitchStatementWithNoDefaultInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyReturnFromClosureCanBeImplicit"
                     displayName="'return' statement can be implicit"
                     groupName="Control Flow" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyReturnFromClosureCanBeImplicitInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyTrivialConditional"
                     displayName="Redundant conditional expression" groupName="Control Flow"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyTrivialConditionalInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyConstantConditional"
                     displayName="Constant conditional expression" groupName="Control Flow"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyConstantConditionalInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyConstantIfStatement" displayName="Constant if statement"
                     groupName="Control Flow"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyConstantIfStatementInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyTrivialIf" displayName="Redundant 'if' statement"
                     groupName="Control Flow" enabledByDefault="true"
                     level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.control.GroovyTrivialIfInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="JavaStylePropertiesInvocation"
                     displayName="Java-style property access"
                     groupName="Style" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.style.JavaStylePropertiesInvocationInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyAccessToStaticFieldLockedOnInstance"
                     displayName="Access to static field locked on instance data"
                     groupName="Threading issues" enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyAccessToStaticFieldLockedOnInstanceInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyDoubleCheckedLocking" displayName="Double-checked locking"
                     groupName="Threading issues"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyDoubleCheckedLockingInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyUnconditionalWait" displayName="Unconditional 'wait' call"
                     groupName="Threading issues"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyUnconditionalWaitInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyPublicFieldAccessedInSynchronizedContext"
                     displayName="Non-private field accessed in synchronized context" groupName="Threading issues" enabledByDefault="false"
                     level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyPublicFieldAccessedInSynchronizedContextInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyBusyWait" displayName="Busy wait" groupName="Threading issues"
                     enabledByDefault="false"
                     level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyBusyWaitInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyEmptySyncBlock" displayName="Empty 'synchronized' block"
                     groupName="Threading issues"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyEmptySyncBlockInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovySynchronizationOnThis" displayName="Synchronization on 'this'"
                     groupName="Threading issues"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovySynchronizationOnThisInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovySynchronizedMethod" displayName="Synchronized method"
                     groupName="Threading issues"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovySynchronizedMethodInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyNestedSynchronizedStatement"
                     displayName="Nested 'synchronized' statement"
                     groupName="Threading issues" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyNestedSynchronizedStatementInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyThreadStopSuspendResume"
                     displayName="Call to Thread.stop(), Thread.suspend(), or Thread.resume()"
                     groupName="Threading issues" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyThreadStopSuspendResumeInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovySystemRunFinalizersOnExit"
                     displayName="Call to System.runFinalizersOnExit()"
                     groupName="Threading issues" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovySystemRunFinalizersOnExitInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyNotifyWhileNotSynchronized"
                     displayName="'notify()' or 'notifyAll()' while not synced"
                     groupName="Threading issues" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyNotifyWhileNotSynchronizedInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyWaitCallNotInLoop" displayName="'wait()' not in loop"
                     groupName="Threading issues"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyWaitCallNotInLoopInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyWaitWhileNotSynchronized" displayName="'wait()' while not synced"
                     groupName="Threading issues"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyWaitWhileNotSynchronizedInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovySynchronizationOnNonFinalField"
                     displayName="Synchronization on non-final field"
                     groupName="Threading issues" enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovySynchronizationOnNonFinalFieldInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovySynchronizationOnVariableInitializedWithLiteral"
                     displayName="Synchronization on variable initialized with literal" groupName="Threading issues"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovySynchronizationOnVariableInitializedWithLiteralInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyUnsynchronizedMethodOverridesSynchronizedMethod"
                     displayName="Unsynchronized method overrides synchronized method" groupName="Threading issues" enabledByDefault="true"
                     level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.threading.GroovyUnsynchronizedMethodOverridesSynchronizedMethodInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyMethodParameterCount"
                     displayName="Method with too many parameters" groupName="Method Metrics"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.metrics.GroovyMethodParameterCountInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyOverlyComplexMethod" displayName="Overly complex method"
                     groupName="Method Metrics"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.metrics.GroovyOverlyComplexMethodInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyOverlyLongMethod" displayName="Overly long method"
                     groupName="Method Metrics" enabledByDefault="false"
                     level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.metrics.GroovyOverlyLongMethodInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyOverlyNestedMethod" displayName="Overly nested method"
                     groupName="Method Metrics"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.metrics.GroovyOverlyNestedMethodInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyMethodWithMoreThanThreeNegations"
                     displayName="Method with more than three negations"
                     groupName="Method Metrics" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.metrics.GroovyMethodWithMoreThanThreeNegationsInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyMultipleReturnPointsPerMethod"
                     displayName="Method with multiple return points"
                     groupName="Method Metrics" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.metrics.GroovyMultipleReturnPointsPerMethodInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyNestedSwitch" displayName="Nested switch statement"
                     groupName="Potentially confusing code constructs"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyNestedSwitchInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyConditional" displayName="Conditional expression"
                     groupName="Potentially confusing code constructs"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyConditionalInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GrFieldAlreadyDefined"
                     bundle="messages.GroovyInspectionBundle"
                     key="field.already.defined" groupName="Potentially confusing code constructs" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GrFieldAlreadyDefinedInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="ClashingGetters"
                     bundle="messages.GroovyInspectionBundle"
                     key="clashing.getters" groupName="Potentially confusing code constructs" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.ClashingGettersInspection"/>

    <localInspection language="Groovy" groupPath="Groovy" shortName="GrDeprecatedAPIUsage"
                     bundle="messages.GroovyInspectionBundle"
                     key="gr.deprecated.api.usage" groupName="Potentially confusing code constructs" enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GrDeprecatedAPIUsageInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyNestedConditional" displayName="Nested conditional expression"
                     groupName="Potentially confusing code constructs" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyNestedConditionalInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyNegatedConditional" displayName="Negated conditional expression"
                     groupName="Potentially confusing code constructs" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyNegatedConditionalInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyInArgumentCheck" displayName="Incompatible 'in' argument types"
                     enabledByDefault="true" groupName="Probable bugs" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.GroovyInArgumentCheckInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyNegatedIf" displayName="Negated if condition expression"
                     groupName="Potentially confusing code constructs" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyNegatedIfInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyResultOfIncrementOrDecrementUsed"
                     displayName="Result of increment or decrement used"
                     groupName="Potentially confusing code constructs" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyResultOfIncrementOrDecrementUsedInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" enabledByDefault="true" level="WARNING"
                     shortName="GrReassignedInClosureLocalVar"
                     displayName="Local variable is reassigned in closure or anonymous class"
                     groupName="Potentially confusing code constructs"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GrReassignedInClosureLocalVarInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="UnnecessaryQualifiedReference"
                     bundle="messages.GroovyInspectionBundle"
                     key="unnecessary.qualified.reference" groupName="Potentially confusing code constructs" enabledByDefault="true"
                     level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.UnnecessaryQualifiedReferenceInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyEmptyStatementBody" displayName="Statement with empty body"
                     groupName="Potentially confusing code constructs" enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyEmptyStatementBodyInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyPointlessBoolean"
                     bundle="messages.GroovyInspectionBundle"
                     key="pointless.boolean.display.name" groupName="Potentially confusing code constructs" enabledByDefault="true"
                     level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyPointlessBooleanInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyPointlessArithmetic"
                     displayName="Pointless arithmetic expression"
                     groupName="Potentially confusing code constructs" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyPointlessArithmeticInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyDoubleNegation" displayName="Double negation"
                     groupName="Potentially confusing code constructs"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyDoubleNegationInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyOverlyComplexArithmeticExpression"
                     displayName="Overly complex arithmetic expression"
                     groupName="Potentially confusing code constructs" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyOverlyComplexArithmeticExpressionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyOverlyComplexBooleanExpression"
                     displayName="Overly complex boolean expression"
                     groupName="Potentially confusing code constructs" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyOverlyComplexBooleanExpressionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyOctalInteger" displayName="Octal integer"
                     groupName="Potentially confusing code constructs"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.GroovyOctalIntegerInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyDuplicateSwitchBranch" displayName="Duplicate switch case"
                     groupName="Validity issues"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.validity.GroovyDuplicateSwitchBranchInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyNonShortCircuitBoolean" displayName="Non short-circuit boolean"
                     groupName="Probable bugs"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.GroovyNonShortCircuitBooleanInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyInfiniteLoopStatement" displayName="Infinite loop statement"
                     groupName="Probable bugs"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.GroovyInfiniteLoopStatementInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyInfiniteRecursion" displayName="Infinite recursion"
                     groupName="Probable bugs" enabledByDefault="true"
                     level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.GroovyInfiniteRecursionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyDivideByZero" displayName="Divide by zero"
                     groupName="Probable bugs" enabledByDefault="true"
                     level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.GroovyDivideByZeroInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyResultOfObjectAllocationIgnored"
                     displayName="Result of object allocation ignored"
                     groupName="Probable bugs" enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.GroovyResultOfObjectAllocationIgnoredInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyAccessibility"
                     bundle="messages.GroovyInspectionBundle"
                     key="access.to.inaccessible.element" groupName="Probable bugs" enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.GroovyAccessibilityInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyConstructorNamedArguments"
                     displayName="Named arguments of constructor call" groupName="Probable bugs"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.GroovyConstructorNamedArgumentsInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyDocCheck" displayName="GroovyDoc issues"
                     groupName="Probable bugs"
                     enabledByDefault="true" level="ERROR"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.GroovyDocCheckInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyRangeTypeCheck"
                     bundle="messages.GroovyInspectionBundle"
                     key="incorrect.range.argument" groupName="Probable bugs" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.GroovyRangeTypeCheckInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="NewInstanceOfSingleton"
                     bundle="messages.GroovyInspectionBundle"
                     key="new.instance.of.singleton" groupName="Potentially confusing code constructs" enabledByDefault="true"
                     level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.NewInstanceOfSingletonInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyLabeledStatement"
                     bundle="messages.GroovyInspectionBundle"
                     key="check.labeled.statement" groupName="Probable bugs" enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.bugs.GroovyLabeledStatementInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyClassNamingConvention" displayName="Class naming convention"
                     groupName="Naming Conventions"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.naming.GroovyClassNamingConventionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyInterfaceNamingConvention"
                     displayName="Interface naming convention" groupName="Naming Conventions"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.naming.GroovyInterfaceNamingConventionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyAnnotationNamingConvention"
                     displayName="Annotation naming convention" groupName="Naming Conventions"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.naming.GroovyAnnotationNamingConventionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyEnumerationNamingConvention"
                     displayName="Enumeration naming convention"
                     groupName="Naming Conventions" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.naming.GroovyEnumerationNamingConventionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyLocalVariableNamingConvention"
                     displayName="Local variable naming convention"
                     groupName="Naming Conventions" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.naming.GroovyLocalVariableNamingConventionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyStaticMethodNamingConvention"
                     displayName="Static method naming convention"
                     groupName="Naming Conventions" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.naming.GroovyStaticMethodNamingConventionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyStaticVariableNamingConvention"
                     displayName="Static variable naming convention"
                     groupName="Naming Conventions" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.naming.GroovyStaticVariableNamingConventionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyInstanceMethodNamingConvention"
                     displayName="Instance method naming convention"
                     groupName="Naming Conventions" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.naming.GroovyInstanceMethodNamingConventionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyInstanceVariableNamingConvention"
                     displayName="Instance variable naming convention"
                     groupName="Naming Conventions" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.naming.GroovyInstanceVariableNamingConventionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyConstantNamingConvention"
                     displayName="Constant naming convention" groupName="Naming Conventions"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.naming.GroovyConstantNamingConventionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyParameterNamingConvention"
                     displayName="Method parameter naming convention"
                     groupName="Naming Conventions" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.naming.GroovyParameterNamingConventionInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyGetterCallCanBePropertyAccess"
                     displayName="Getter call can be property access"
                     groupName="GPath inspections" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.gpath.GroovyGetterCallCanBePropertyAccessInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovySetterCallCanBePropertyAccess"
                     displayName="Setter call can be property access"
                     groupName="GPath inspections" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.gpath.GroovySetterCallCanBePropertyAccessInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyMapGetCanBeKeyedAccess"
                     displayName="Call to Map.get can be keyed access"
                     groupName="GPath inspections" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.gpath.GroovyMapGetCanBeKeyedAccessInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyMapPutCanBeKeyedAccess"
                     displayName="Call to Map.put can be keyed access"
                     groupName="GPath inspections" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.gpath.GroovyMapPutCanBeKeyedAccessInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyListGetCanBeKeyedAccess"
                     displayName="Call to List.get can be keyed access"
                     groupName="GPath inspections" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.gpath.GroovyListGetCanBeKeyedAccessInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyListSetCanBeKeyedAccess"
                     displayName="Call to List.set can be keyed access"
                     groupName="GPath inspections" enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.gpath.GroovyListSetCanBeKeyedAccessInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovyUntypedAccess" displayName="Access to untyped expression"
                     groupName="Probable bugs"
                     enabledByDefault="false" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.untypedUnresolvedAccess.GroovyUntypedAccessInspection"/>
    <localInspection language="Groovy" groupPath="Groovy" shortName="GroovySingletonAnnotation"
                     displayName="Check '@Singleton' annotation conventions"
                     groupName="Annotations verifying" enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.annotator.inspections.GroovySingletonAnnotationInspection"/>

    <localInspection language="Groovy" groupPath="Groovy" shortName="DelegatesTo" displayName="@DelegatesTo inspection"
                     groupName="Annotations verifying" enabledByDefault="true" level="WARNING"
                     implementationClass="org.jetbrains.plugins.groovy.impl.codeInspection.confusing.DelegatesToInspection"/>

    <implicitUsageProvider implementation="org.jetbrains.plugins.groovy.impl.findUsages.GrImplicitUsageProvider"/>

    <!-- control flow -->
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.DemorgansLawIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.SplitIfIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.InvertIfIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.FlipIfIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.ReplaceTernaryWithIfElseIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.ReplaceIfWithTernaryIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.SimplifyTernaryOperatorIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.CreateParameterForFieldIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.MergeIfAndIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.ExpandBooleanIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.FlipConjunctionIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.FlipComparisonIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.NegateComparisonIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.MergeElseIfIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.SplitElseIfIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.control.FlipConditionalIntention</className>
    </intentionAction>

    <!-- closures -->
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.closures</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.closure.MakeClosureCallExplicitIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.closures</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.closure.MakeClosureCallImplicitIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.closures</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.closure.ForToEachIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.closures</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.closure.EachToForIntention</className>
    </intentionAction>
    <!--
    todo make this work
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.closures</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.closure.ConvertClosureArgToItIntention</className>
    </intentionAction>
    -->


    <!-- comments -->
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.comments</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.comments.ChangeToCStyleCommentIntention</className>
    </intentionAction>
    <!--
    todo make this work
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.comments</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.comments.ChangeToEndOfLineCommentIntention</className>
    </intentionAction>
    -->

    <!-- conversions -->
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.ConvertJavaStyleArrayIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.ConvertIntegerToDecimalIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.ConvertIntegerToHexIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.ConvertIntegerToOctalIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.ConvertIntegerToBinaryIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.IndexingMethodConversionIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.IndexedExpressionConversionIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.strings.ConvertGStringToStringIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.strings.ConvertMultilineStringToSingleLineIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.strings.GrConvertStringToCharIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.strings.RemoveUnnecessaryEscapeCharactersIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.strings.GrBreakStringOnLineBreaksIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.GrSplitDeclarationIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.RemoveParenthesesFromMethodCallIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.RemoveUnnecessaryBracesInGStringIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.ConvertMapToClassIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.strings.ConvertConcatenationToGstringIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.RenameFileWithClassIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.MoveClassToNewFileIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.ConvertMethodToClosureIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.strings.ConvertStringToMultilineIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.ConvertClosureToMethodIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.ConvertSimpleGetterToPropertyIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.GrConvertTypeCastToSafeCastIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.conversions.ConvertJunitAssertionToAssertStatementIntention</className>
    </intentionAction>

    <!-- groovy style -->
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.style.JavaStylePropertiesInvocationIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.style.RemoveUnnecessarySemicolonsIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.style.ImportStaticIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.style.ImportOnDemandIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.style.ConvertToGeeseBracesIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.style.RemoveRedundantClassPropertyIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.style.ConvertFromGeeseBracesIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.style.RemoveUnnecessaryReturnIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.style.AddReturnTypeFix</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.style.parameterToEntry.ConvertParameterToMapEntryIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.style.ReplaceAbstractClassInstanceByMapIntention</className>
    </intentionAction>

    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.grape.GrabDependencies</className>
    </intentionAction>

    <!--declaration-->
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.declaration</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.declaration.GrCreateSubclassAction</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.declaration</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.declaration.GrCreateFieldForParameterIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.declaration</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.declaration.GrSetStrongTypeIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.declaration</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.declaration.GrMakeMemberPublicIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.declaration</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.declaration.GrMakeMemberProtectedIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.declaration</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.declaration.GrMakeMemberPrivateIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.declaration</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.declaration.GrIntroduceLocalVariableIntention</className>
    </intentionAction>

    <!--other-->
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.other</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.other.GrCreateMissingSwitchBranchesIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.other</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.other.GrAliasImportIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>messages.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.other</categoryKey>
      <className>org.jetbrains.plugins.groovy.impl.intentions.other.GrCopyStringConcatenationContentIntention</className>
    </intentionAction>


    <projectService serviceInterface="org.jetbrains.plugins.groovy.impl.griffon.GriffonProjectViewState"
                    serviceImplementation="org.jetbrains.plugins.groovy.impl.griffon.GriffonProjectViewState"/>


    <toolWindow id="Griffon View" anchor="left" secondary="false" icon="consulo.groovy.psi.GroovyPsiIconGroup@griffon.griffontoolwindow"
                factoryClass="org.jetbrains.plugins.groovy.impl.griffon.GriffonToolWindowFactory"
                conditionClass="org.jetbrains.plugins.groovy.impl.griffon.GriffonToolWindowFactory"/>

  </extensions>

  <actions>
    <action id="Groovy.Shell.Execute" class="consulo.ui.ex.action.EmptyAction" text="Execute Groovy Code"
            description="Execute Groovy code in console">
      <keyboard-shortcut first-keystroke="control ENTER" keymap="$default"/>
    </action>

    <action id="Groovy.NewClass" class="org.jetbrains.plugins.groovy.impl.actions.NewGroovyClassAction"
            text="Groovy Class" description="Create new Groovy class">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewGroup1"/>
    </action>
    <action id="Groovy.NewScript" class="org.jetbrains.plugins.groovy.impl.actions.NewScriptAction"
            text="Groovy Script" description="Create new Groovy script">
      <add-to-group group-id="NewGroup" anchor="last"/>
    </action>

    <group id="Groovy.Dynamic.Toolbar">
      <action id="Groovy.Dynamic.Remove" class="org.jetbrains.plugins.groovy.impl.annotator.intentions.dynamic.RemoveDynamicAction"
              icon="consulo.platform.base.PlatformIconGroup@general.remove" text="Remove" description="Remove dynamic element"/>
      <separator/>
      <action id="Groovy.Dynamic.ExpandAll" class="org.jetbrains.plugins.groovy.impl.annotator.intentions.dynamic.ExpandAllAction"
              icon="consulo.platform.base.PlatformIconGroup@ide.notification.expand" text="Expand all" description="Collapse all"/>
      <action id="Groovy.Dynamic.CollapseAll" class="org.jetbrains.plugins.groovy.impl.annotator.intentions.dynamic.CollapseAllAction"
              icon="consulo.platform.base.PlatformIconGroup@actions.collapseall" text="Collapse all" description="Collapse all"/>
    </group>


    <action id="ConvertGroovyToJava"
            class="org.jetbrains.plugins.groovy.impl.actions.ConvertToJavaAction"
            text="Convert to Java"
            description="Convert Groovy files to Java">
      <add-to-group group-id="RefactoringMenu"/>
    </action>

    <group id="Internal.Groovy" text="Groovy" popup="true" internal="true">
      <action id="DumpGroovyControlFlowAction"
              class="org.jetbrains.plugins.groovy.impl.actions.DumpGroovyControlFlowAction"
              text="dump groovy control flow"
              description="" internal="true"/>
      <action id="DumpGroovyStubsAction"
              class="org.jetbrains.plugins.groovy.impl.actions.DumpGroovyStubsAction"
              text="dump groovy stubs"
              description="" internal="true"/>
      <add-to-group group-id="Internal"/>
    </group>

    <action id="ExcludeFromStubGeneration"
            class="org.jetbrains.plugins.groovy.impl.compiler.ExcludeFromStubGenerationAction"
            text="Exclude from stub generation" description="Don't generate Java stubs for this Groovy file on compilation">
      <add-to-group group-id="EditorTabPopupMenu" anchor="after" relative-to-action="RenameJavaFileToGroovyFileAction"/>
    </action>


    <group id="GroovyGenerateGroup1">
      <action id="org.jetbrains.plugins.groovy.impl.actions.generate.constructors.GroovyGenerateConstructorAction"
              class="org.jetbrains.plugins.groovy.impl.actions.generate.constructors.GroovyGenerateConstructorAction"
              text="Constructor" description="Generates constructor"/>
      <action id="org.jetbrains.plugins.groovy.impl.actions.generate.accessors.GroovyGenerateGetterAction"
              class="org.jetbrains.plugins.groovy.impl.actions.generate.accessors.GroovyGenerateGetterAction"
              text="Getter" description="Generates getter"/>
      <action id="org.jetbrains.plugins.groovy.impl.actions.generate.accessors.GroovyGenerateSetterAction"
              class="org.jetbrains.plugins.groovy.impl.actions.generate.accessors.GroovyGenerateSetterAction"
              text="Setter" description="Generates setter"/>
      <action id="org.jetbrains.plugins.groovy.impl.actions.generate.accessors.GroovyGenerateGetterSetterAction"
              class="org.jetbrains.plugins.groovy.impl.actions.generate.accessors.GroovyGenerateGetterSetterAction"
              text="Getter and Setter" description="Generates getter"/>
      <action id="org.jetbrains.plugins.groovy.impl.actions.generate.equals.GroovyGenerateEqualsAction"
              class="org.jetbrains.plugins.groovy.impl.actions.generate.equals.GroovyGenerateEqualsAction"
              text="equals() and hashCode()" description="Action generates equals and hashCode now"/>
      <action id="org.jetbrains.plugins.groovy.impl.actions.generate.missing.GroovyGenerateMethodMissingAction"
              class="org.jetbrains.plugins.groovy.impl.actions.generate.missing.GroovyGenerateMethodMissingAction"
              text="methodMissing()" description="Action generates propertyMissing()"/>
      <action id="org.jetbrains.plugins.groovy.impl.actions.generate.missing.GroovyGeneratePropertyMissingAction"
              class="org.jetbrains.plugins.groovy.impl.actions.generate.missing.GroovyGeneratePropertyMissingAction"
              text="propertyMissing()" description="Action generates propertyMissing()"/>

      <add-to-group group-id="GenerateGroup" anchor="after" relative-to-action="JavaGenerateGroup1"/>
    </group>

    <action id="Groovy.Doc.Generating"
            class="org.jetbrains.plugins.groovy.impl.doc.actions.GenerateGroovyDocAction"
            text="Generate GroovyDoc..." description="Generating Groovy Documentation"
            icon="consulo.groovy.psi.GroovyPsiIconGroup@groovy.groovydoc">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>
    <action id="Groovy.Console"
            class="org.jetbrains.plugins.groovy.impl.shell.GroovyShellAction"
            text="Groovy Shell..." description="Launch Groovy Shell"
            icon="consulo.groovy.psi.GroovyPsiIconGroup@groovy.groovy_16x16">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>

    <group id="Mvc.Actions" popup="true" class="org.jetbrains.plugins.groovy.impl.mvc.MvcActionGroup">
      <action id="Mvc.Upgrade"
              class="org.jetbrains.plugins.groovy.impl.mvc.MvcUpgradeAction"
              text="Change SDK version" description="Change Grails/Griffon SDK version">
      </action>

      <action id="Griffon.UpdateDependencies" class="org.jetbrains.plugins.groovy.impl.griffon.UpdateGriffonSettingsAction"
              text="Synchronize Griffon settings"
              description="Refresh Consulo project structure so that it matches Griffon build settings">
      </action>

      <action id="Mvc.RunTarget" class="org.jetbrains.plugins.groovy.impl.mvc.MvcRunTarget"
              text="Run Target" description="Run arbitrary Grails/Griffon target">
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt G"/>
      </action>

      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </group>
  </actions>
</consulo-plugin>
